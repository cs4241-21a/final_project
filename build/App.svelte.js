import './App.svelte.css.proxy.js';
/* src\App.svelte generated by Svelte v3.43.1 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	handle_promise,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch
} from "./_snowpack/pkg/svelte/internal.js";

import './_snowpack/pkg/codemirror/mode/javascript/javascript.js';
import CodeMirror from './_snowpack/pkg/@joshnuss/svelte-codemirror.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (1:0) <script>   import 'codemirror/mode/javascript/javascript'   import CodeMirror from '@joshnuss/svelte-codemirror'    let editor   let code = "const x = 42"    function getFiles() {     const p = fetch( '/files', {       method:'GET'     }
function create_catch_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

// (76:31)        <ul>         {#each files as f}
function create_then_block(ctx) {
	let ul;
	let each_value = /*files*/ ctx[8];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*load, promise*/ 12) {
				each_value = /*files*/ ctx[8];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (78:8) {#each files as f}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*f*/ ctx[9] + "";
	let t0;
	let t1;
	let t2;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[5](/*f*/ ctx[9]);
	}

	return {
		c() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = text(".js");
			t2 = space();
			attr(a, "href", "#");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t0);
			append(a, t1);
			append(li, t2);

			if (!mounted) {
				dispose = listen(li, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*promise*/ 4 && t0_value !== (t0_value = /*f*/ ctx[9] + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

// (1:0) <script>   import 'codemirror/mode/javascript/javascript'   import CodeMirror from '@joshnuss/svelte-codemirror'    let editor   let code = "const x = 42"    function getFiles() {     const p = fetch( '/files', {       method:'GET'     }
function create_pending_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let promise_1;
	let t0;
	let div1;
	let codemirror;
	let updating_editor;
	let t1;
	let form;
	let t2;
	let button;
	let current;
	let mounted;
	let dispose;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 8
	};

	handle_promise(promise_1 = /*promise*/ ctx[2], info);

	function codemirror_editor_binding(value) {
		/*codemirror_editor_binding*/ ctx[6](value);
	}

	let codemirror_props = {
		options: { lineNumbers: true, mode: "javascript" },
		class: "editor",
		value: /*code*/ ctx[1]
	};

	if (/*editor*/ ctx[0] !== void 0) {
		codemirror_props.editor = /*editor*/ ctx[0];
	}

	codemirror = new CodeMirror({ props: codemirror_props });
	binding_callbacks.push(() => bind(codemirror, 'editor', codemirror_editor_binding));

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			info.block.c();
			t0 = space();
			div1 = element("div");
			create_component(codemirror.$$.fragment);
			t1 = space();
			form = element("form");
			form.innerHTML = `<input type="text" id="fileName"/>`;
			t2 = space();
			button = element("button");
			button.textContent = "Save";
			attr(div0, "class", "sidebar");
			attr(div1, "class", "codebox");
			attr(div2, "class", "box svelte-r53fp3");
			attr(form, "class", "forms");
			attr(form, "id", "saveName");
			attr(form, "action", "");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			info.block.m(div0, info.anchor = null);
			info.mount = () => div0;
			info.anchor = null;
			append(div2, t0);
			append(div2, div1);
			mount_component(codemirror, div1, null);
			insert(target, t1, anchor);
			insert(target, form, anchor);
			insert(target, t2, anchor);
			insert(target, button, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*save*/ ctx[4]);
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*promise*/ 4 && promise_1 !== (promise_1 = /*promise*/ ctx[2]) && handle_promise(promise_1, info)) {
				
			} else {
				update_await_block_branch(info, ctx, dirty);
			}

			const codemirror_changes = {};
			if (dirty & /*code*/ 2) codemirror_changes.value = /*code*/ ctx[1];

			if (!updating_editor && dirty & /*editor*/ 1) {
				updating_editor = true;
				codemirror_changes.editor = /*editor*/ ctx[0];
				add_flush_callback(() => updating_editor = false);
			}

			codemirror.$set(codemirror_changes);
		},
		i(local) {
			if (current) return;
			transition_in(codemirror.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(codemirror.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			info.block.d();
			info.token = null;
			info = null;
			destroy_component(codemirror);
			if (detaching) detach(t1);
			if (detaching) detach(form);
			if (detaching) detach(t2);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let editor;
	let code = "const x = 42";

	function getFiles() {
		const p = fetch('/files', { method: 'GET' }).then(response => response.json()).then(json => {
			$$invalidate(2, promise = json.files);
			return json.files;
		});

		return p;
	}

	function load(x) {
		let file = x.f;
		let json = { name: file };
		let body = JSON.stringify(json);

		fetch("/load", {
			method: "POST",
			headers: { 'Content-Type': 'application/json' },
			body
		}).then(response => response.json()).then(json => {
			$$invalidate(1, code = json.code);
			console.log(json);
		});
	} // code = "const x = 69420\nconst y = 21"

	function save() {
		var textToWrite = editor.doc.getValue();

		const input = document.getElementById("saveName"),
			json = {
				name: input.elements[0].value,
				code: textToWrite
			},
			body = JSON.stringify(json);

		console.log("Saving file");

		fetch("/save", {
			method: "POST",
			headers: { 'Content-Type': 'application/json' },
			body
		}).then(function (response) {
			if (response.status === 200) {
				console.log(body);
				getFiles();
			} else {
				return response.text();
			}
		});

		return true;
	}

	let promise = ["test"];
	const click_handler = f => load({ f });

	function codemirror_editor_binding(value) {
		editor = value;
		$$invalidate(0, editor);
	}

	return [editor, code, promise, load, save, click_handler, codemirror_editor_binding];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;